@{
    ViewData["Title"] = "Football Predictions";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            text-align: center;
            width: 350px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        h1 {
            color: #333;
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin: 10px 0 5px;
            font-weight: bold;
            text-align: left;
            width: 100%;
        }

        input {
            width: 100%;
            padding: 8px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
        }

        button {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 15px;
            cursor: pointer;
            font-size: 16px;
            border-radius: 5px;
            width: 100%;
            margin-top: 10px;
        }

            button:hover {
                background-color: #218838;
            }

        #predictionResult {
            margin-top: 20px;
            font-weight: bold;
            width: 100%;
            text-align: center;
        }

        #resultText {
            font-size: 18px;
            margin-top: 10px;
            padding: 10px;
            border-radius: 5px;
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            width: 100%;
            box-sizing: border-box;
        }

        #matchesTable {
            margin-top: 20px;
            width: 100%;
            border-collapse: collapse;
        }

            #matchesTable th, #matchesTable td {
                border: 1px solid #ddd;
                padding: 8px;
                text-align: center;
            }

            #matchesTable th {
                background-color: #f2f2f2;
            }
    </style>
</head>
<body>
    <div class="container">
        <h1>Football Predictions</h1>

        <form id="predictionForm" style="width: 100%;">
            <label for="homeTeam">Home Team:</label>
            <input type="text" id="homeTeam" name="homeTeam" required placeholder="Enter home team" />

            <label for="awayTeam">Away Team:</label>
            <input type="text" id="awayTeam" name="awayTeam" required placeholder="Enter away team" />

            <button type="submit">Predict</button>
        </form>

        <div id="predictionResult">
            <h3>Prediction Result:</h3>
            <p id="resultText"></p>
        </div>

        <div id="matchesSection">
            <h3>Last 5 Matches:</h3>
            <table id="matchesTable">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Home Team</th>
                        <th>Away Team</th>
                        <th>Score</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be populated by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>

    <script>
        document.getElementById('predictionForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const homeTeam = document.getElementById('homeTeam').value;
            const awayTeam = document.getElementById('awayTeam').value;

            fetch('/Home/Predict', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ homeTeam: homeTeam, awayTeam: awayTeam })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Server response:", data.result);
                    const resultText = document.getElementById('resultText');
                    if (data.result.startsWith("Error:")) {
                        resultText.textContent = data.result;
                        resultText.style.color = "red";
                    } else if (data.result.trim() === "1") {
                        resultText.textContent = "Prediction: Home Team Wins!";
                        resultText.style.color = "green";
                    } else if (data.result.trim() === "0") {
                        resultText.textContent = "Prediction: Draw!";
                        resultText.style.color = "orange";
                    } else if (data.result.trim() === "-1") {
                        resultText.textContent = "Prediction: Away Team Wins!";
                        resultText.style.color = "red";
                    } else {
                        resultText.textContent = `Unexpected error: ${data.result}`;
                        resultText.style.color = "red";
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    const resultText = document.getElementById('resultText');
                    resultText.textContent = "Error: Could not predict the result.";
                    resultText.style.color = "red";
                });
        });

        // Funkcja do pobierania ostatnich meczów
        async function getLastMatches(teamId) {
            const response = await fetch('/Home/GetLastMatches', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ teamId: teamId }),
            });

            const data = await response.json();
            if (data.result === "Success") {
                console.log("Ostatnie mecze:", data.matches);
                displayMatches(data.matches);
            } else {
                console.error("Błąd:", data.result);
            }
        }

        // Funkcja do wyświetlania meczów w tabeli
        function displayMatches(matches) {
            const tableBody = document.querySelector('#matchesTable tbody');
            tableBody.innerHTML = ''; // Wyczyść tabelę

            matches.forEach(match => {
                const row = document.createElement('tr');
                row.innerHTML = `
                            <td>${new Date(match.utcDate).toLocaleDateString()}</td>
                            <td>${match.homeTeam}</td>
                            <td>${match.awayTeam}</td>
                            <td>${match.score.fullTimeHome} - ${match.score.fullTimeAway}</td>
                        `;
                tableBody.appendChild(row);
            });
        }

        // Przykład użycia
        getLastMatches(57); // 57 to przykładowe ID drużyny (np. Arsenal)
    </script>
</body>
</html>